name: GDPR Compliance Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'tests/**'
      - 'server/**'
      - 'shared/**'
      - 'client/src/pages/gdpr/**'
      - 'client/src/components/gdpr/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'tests/**'
      - 'server/**'
      - 'shared/**'
      - 'client/src/pages/gdpr/**'
      - 'client/src/components/gdpr/**'
  schedule:
    # Run daily at 2 AM UTC for continuous compliance verification
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_category:
        description: 'Test category to run (core, compliance, lifecycle, incident, protection, security)'
        required: false
        default: 'all'
      test_priority:
        description: 'Test priority (critical, high, medium, low)'  
        required: false
        default: 'all'
      parallel_execution:
        description: 'Run tests in parallel'
        type: boolean
        default: true

env:
  GDPR_COMPLIANCE_ENABLED: true
  NODE_ENV: test
  GDPR_POLICY_VERSION: '2.0'

jobs:
  gdpr-compliance-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_lms
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          
      - name: Setup database schema
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_lms
        run: |
          npm run db:push
          
      - name: Validate test environment
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_lms
        run: |
          echo "GDPR_COMPLIANCE_ENABLED=${GDPR_COMPLIANCE_ENABLED}"
          echo "NODE_ENV=${NODE_ENV}"
          echo "Database URL configured: ${DATABASE_URL}"
          
      - name: Run critical GDPR tests first
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_lms
        run: |
          NODE_ENV=test GDPR_COMPLIANCE_ENABLED=true tsx tests/run-all-tests.ts --priority critical --report --format json
          
      - name: Run specific category tests (if specified)
        if: ${{ github.event.inputs.test_category != 'all' && github.event.inputs.test_category != '' }}
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_lms
        run: |
          NODE_ENV=test GDPR_COMPLIANCE_ENABLED=true tsx tests/run-all-tests.ts --category ${{ github.event.inputs.test_category }} --report --format json
          
      - name: Run specific priority tests (if specified)
        if: ${{ github.event.inputs.test_priority != 'all' && github.event.inputs.test_priority != '' }}
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_lms
        run: |
          NODE_ENV=test GDPR_COMPLIANCE_ENABLED=true tsx tests/run-all-tests.ts --priority ${{ github.event.inputs.test_priority }} --report --format json
          
      - name: Run full GDPR compliance test suite
        if: ${{ github.event.inputs.test_category == 'all' || github.event.inputs.test_category == '' }}
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_lms
          PARALLEL_EXECUTION: ${{ github.event.inputs.parallel_execution == 'true' || github.event_name != 'workflow_dispatch' }}
        run: |
          if [ "$PARALLEL_EXECUTION" = "true" ]; then
            NODE_ENV=test GDPR_COMPLIANCE_ENABLED=true tsx tests/run-all-tests.ts --parallel --report --format json --verbose
          else
            NODE_ENV=test GDPR_COMPLIANCE_ENABLED=true tsx tests/run-all-tests.ts --report --format json --verbose
          fi
          
      - name: Generate HTML compliance report
        if: always()
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_lms
        run: |
          NODE_ENV=test GDPR_COMPLIANCE_ENABLED=true tsx tests/run-all-tests.ts --report --format html --timeout 10000
          
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gdpr-test-reports-${{ matrix.node-version }}
          path: |
            test-reports/
            tests/logs/
          retention-days: 30
          
      - name: Upload compliance dashboard
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gdpr-compliance-dashboard-${{ matrix.node-version }}
          path: test-reports/*.html
          retention-days: 7
          
      - name: Check compliance score
        if: always()
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_lms
        run: |
          NODE_ENV=test GDPR_COMPLIANCE_ENABLED=true tsx tests/run-all-tests.ts --check-compliance --compliance-threshold 95
          
      - name: Comment compliance score on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Find the latest test report
            const reportsDir = 'test-reports';
            if (fs.existsSync(reportsDir)) {
              const files = fs.readdirSync(reportsDir).filter(f => f.startsWith('gdpr-test-report-') && f.endsWith('.json'));
              if (files.length > 0) {
                const latestReport = files.sort().pop();
                const reportData = JSON.parse(fs.readFileSync(path.join(reportsDir, latestReport), 'utf8'));
                
                const complianceScore = reportData.compliance?.overallCompliance || 0;
                const totalTests = reportData.summary?.total || 0;
                const passedTests = reportData.summary?.passed || 0;
                const failedTests = reportData.summary?.failed || 0;
                
                const body = `## üõ°Ô∏è GDPR Compliance Test Results
                
                **Overall Compliance Score: ${complianceScore.toFixed(1)}%**
                
                üìä **Test Summary:**
                - ‚úÖ Passed: ${passedTests}
                - ‚ùå Failed: ${failedTests}
                - üìã Total: ${totalTests}
                - ‚è±Ô∏è Duration: ${reportData.duration}ms
                
                ${complianceScore >= 95 ? '‚úÖ **Compliance Check: PASSED**' : '‚ùå **Compliance Check: FAILED**'}
                ${complianceScore < 95 ? '\n‚ö†Ô∏è Compliance score below required 95% threshold' : ''}
                
                üîç **Critical Tests Status:**
                ${reportData.compliance.criticalTestsPassed} critical tests passed
                
                üìÑ Full compliance report and detailed test results are available in the workflow artifacts.`;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body
                });
              }
            }

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run GDPR data flow security scan
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_JSON: true
          VALIDATE_YAML: true
          LINTER_RULES_PATH: /
          TYPESCRIPT_ES_CONFIG_FILE: tsconfig.json
          
      - name: Scan for sensitive data patterns
        run: |
          echo "Scanning for potential GDPR-sensitive data patterns..."
          
          # Check for hardcoded personal data patterns
          if grep -r "email.*@.*\..*" tests/ --exclude-dir=test-reports --include="*.ts" --include="*.js"; then
            echo "::warning::Found potential hardcoded email addresses in tests"
          fi
          
          # Check for potential API keys or secrets
          if grep -r "api_key\|secret\|password.*=" tests/ --exclude-dir=test-reports --include="*.ts" --include="*.js" | grep -v "password_hash\|password.*:.*string"; then
            echo "::error::Found potential hardcoded secrets in tests"
            exit 1
          fi
          
          echo "‚úÖ Security scan completed"

  integration-verification:
    runs-on: ubuntu-latest
    needs: gdpr-compliance-tests
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Verify GDPR API endpoints exist
        env:
          NODE_ENV: test
          GDPR_COMPLIANCE_ENABLED: true
        run: |
          echo "Verifying GDPR API endpoint implementations..."
          
          # Check if GDPR routes are properly implemented
          if ! grep -r "/api/gdpr" server/ --include="*.ts" --include="*.js"; then
            echo "::error::GDPR API routes not found in server implementation"
            exit 1
          fi
          
          echo "‚úÖ GDPR API endpoints verified"
          
      - name: Verify frontend GDPR components
        run: |
          echo "Verifying GDPR frontend components..."
          
          # Check for GDPR frontend components
          if [ -d "client/src/pages/gdpr" ] || [ -d "client/src/components/gdpr" ]; then
            echo "‚úÖ GDPR frontend components found"
          else
            echo "::warning::GDPR frontend components not found"
          fi

  notification:
    runs-on: ubuntu-latest
    needs: [gdpr-compliance-tests, security-scan, integration-verification]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify on compliance failure
        if: ${{ needs.gdpr-compliance-tests.result == 'failure' }}
        run: |
          echo "::error::GDPR Compliance tests failed on main branch"
          echo "This requires immediate attention to maintain regulatory compliance"
          # Add notification to Slack/Teams/Email here if configured
          
      - name: Notify on compliance success
        if: ${{ needs.gdpr-compliance-tests.result == 'success' }}
        run: |
          echo "‚úÖ GDPR Compliance tests passed successfully"
          echo "System maintains regulatory compliance standards"